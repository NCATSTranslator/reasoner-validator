Search.setIndex({"docnames": ["index", "reasoner_validator", "reasoner_validator.biolink", "reasoner_validator.report", "reasoner_validator.trapi", "reasoner_validator.trapi.mapping", "reasoner_validator.validation_codes", "reasoner_validator.versioning", "validation_codes_dictionary"], "filenames": ["index.rst", "reasoner_validator.rst", "reasoner_validator.biolink.rst", "reasoner_validator.report.rst", "reasoner_validator.trapi.rst", "reasoner_validator.trapi.mapping.rst", "reasoner_validator.validation_codes.rst", "reasoner_validator.versioning.rst", "validation_codes_dictionary.md"], "titles": ["Reasoner Validator", "TRAPI Response Validation", "Biolink Validation", "Validator Reporter", "TRAPI Schema Validation", "TRAPI Result Mapping", "Validation Codes Dictionary", "SemVer Versioning Utilities", "Validation Codes Dictionary"], "terms": {"thi": [0, 1, 3, 5, 6, 7, 8], "document": [0, 3, 6, 8], "describ": [0, 1], "3": [0, 2, 4, 7], "0": [0, 1, 2, 3, 4, 7, 8], "librari": 0, "In": [0, 7, 8], "particular": [0, 8], "provid": [0, 2, 3, 4, 6, 8], "variou": [0, 1], "method": [0, 1, 2, 3, 4, 5, 6, 7], "ani": [0, 2, 3, 7, 8], "compon": [0, 1, 2, 3, 4, 8], "version": [0, 1, 2, 3, 4, 8], "translat": [0, 4, 8], "biolink": [0, 1, 3], "model": [0, 1, 2, 3], "project": [0, 6], "ha": [0, 1, 2, 3, 8], "two": 0, "dimens": 0, "one": [0, 1, 2, 3, 5, 6, 8], "openapi": [0, 4], "schema": [0, 1, 2, 7, 8], "other": 0, "semant": [0, 2, 7, 8], "note": [0, 1, 2, 3, 7, 8], "function": [0, 3, 4, 8], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8], "backward": 0, "compat": [0, 1], "2": [0, 6, 7], "earlier": [0, 2], "pip": 0, "org": 0, "checkout": 0, "setup": 0, "depend": 0, "standard": [0, 8], "virtual": 0, "environ": 0, "poetri": 0, "follow": 0, "git": [0, 4, 7], "http": [0, 1, 4, 8], "com": [0, 1], "ncatstransl": [0, 1], "cd": 0, "shell": 0, "These": 0, "oper": 0, "softwar": 0, "creat": 0, "simpl": [0, 2, 4], "fashion": 0, "you": [0, 3], "can": [0, 2, 8], "option": [0, 1, 2, 3, 4, 6, 8], "tool": 0, "like": [0, 2, 3, 7, 8], "pyenv": 0, "set": [0, 1, 2, 3, 6, 7, 8], "your": 0, "9": 0, "prior": 0, "unlik": 0, "current": [0, 1, 2, 3, 4, 8], "major": [0, 2, 4, 7], "wrap": 0, "gener": [0, 1, 2, 3, 4, 6, 8], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8], "object": [0, 1, 2, 3, 4, 6], "validatorreport": 0, "which": [0, 1, 2, 3, 4, 6, 7, 8], "subclass": [0, 1, 2, 3, 8], "type": [0, 1, 2, 3, 6, 8], "etc": [0, 2], "top": [0, 3], "level": [0, 1, 3], "respons": [0, 4], "trapiresponsevalid": [0, 1], "wrapper": [0, 1, 2, 3, 4, 5], "sampl": [0, 1, 2], "script": 0, "usr": 0, "bin": 0, "env": 0, "import": 0, "list": [0, 1, 2, 3, 6, 7, 8], "dict": [0, 1, 2, 3, 4, 5, 6], "reasoner_valid": [0, 1, 2, 3, 4, 5, 6, 7], "messages_by_target": [0, 3, 4, 5], "sample_respons": 0, "messag": [0, 1, 2, 3, 4, 5, 6], "query_graph": [0, 1, 2, 3], "node": [0, 1, 2, 5], "diabet": 0, "id": [0, 1, 2], "mondo": [0, 1], "0005148": 0, "drug": 0, "categori": [0, 1, 2, 3], "edg": [0, 1, 2, 3, 5], "treat": [0, 2], "subject": [0, 1, 2], "predic": [0, 1, 2, 3], "knowledge_graph": [0, 1, 2, 3], "name": [0, 2, 3, 4, 6, 7], "chebi": 0, "6801": 0, "metformin": 0, "df87ff82": 0, "node_bind": [0, 1], "edge_bind": [0, 1], "trapi_vers": [0, 1, 2, 4], "1": [0, 2, 3, 4, 7, 8], "5": [0, 7], "If": [0, 1, 2, 3, 4, 6, 7, 8], "omit": [0, 3], "paramet": [0, 1, 2, 3, 4, 6, 7], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8], "toolkit": [0, 2], "default": [0, 1, 2, 3, 4, 6, 7], "appli": [0, 2, 3], "biolink_vers": [0, 1, 2], "4": [0, 2, 7, 8], "sourc": [0, 1, 2, 3], "trigger": [0, 1], "check": [0, 1, 2, 3, 8], "expect": [0, 1, 2, 5, 8], "knowledg": [0, 1, 2, 3, 8], "proven": [0, 2, 3], "ara_sourc": [0, 2], "infor": [0, 2], "molepro": 0, "kp_sourc": [0, 2], "hmdb": 0, "kp_source_typ": [0, 2, 8], "primari": [0, 2, 8], "flag": [0, 3, 6], "fals": [0, 1, 2, 3, 6, 7], "we": [0, 2], "let": [0, 3], "system": 0, "decid": 0, "strict": [0, 1, 2, 3, 8], "context": [0, 1, 2, 3, 6, 8], "unless": [0, 1], "overrid": 0, "here": [0, 2], "strict_valid": [0, 1, 2, 3, 4, 5], "do": 0, "NOT": [0, 1, 7], "throw": 0, "except": [0, 1, 2, 3, 4, 7, 8], "rather": 0, "return": [0, 1, 2, 3, 4, 6, 7, 8], "outcom": 0, "dictionari": [0, 1, 2, 3, 4], "messsag": 0, "just": [0, 7], "equival": [0, 8], "json": [0, 1, 2, 3, 4, 8], "full": [0, 1, 6], "yet": 0, "complet": [0, 1, 6, 8], "check_compliance_of_trapi_respons": [0, 1], "has_messag": [0, 3], "raw": 0, "data": [0, 1, 2, 3, 6, 8], "retriev": [0, 1], "get_all_messag": [0, 3], "dump": [0, 3, 6], "human": [0, 3], "readabl": [0, 3], "text": [0, 3], "report": [0, 1, 2, 4, 6, 8], "stdout": [0, 3], "see": [0, 1], "signatur": 0, "allow": [0, 3, 8], "custom": 0, "format": [0, 2, 3, 4], "The": [0, 1, 2, 3, 5, 8], "partit": 0, "inform": [0, 3, 4], "warn": [0, 1, 2, 3, 4, 6], "error": [0, 1, 2, 3, 4, 6], "critic": [0, 3, 6], "look": [0, 7], "someth": 0, "exampl": [0, 3, 4, 7], "str": [0, 1, 2, 3, 4, 5, 6, 7], "info": [0, 6], "exclud": 0, "scope": [0, 6], "global": [0, 2, 3, 6, 8], "some": [0, 2], "path": [0, 2, 3, 4, 6, 7, 8], "string": [0, 1, 2, 3, 4, 7], "uniqu": [0, 2], "discrimin": 0, "identifi": [0, 1, 2, 3, 5, 6, 7], "edge_id": [0, 1, 2, 8], "zfin": 0, "zdb": 0, "gene": 0, "060825": 0, "345": 0, "active_in": 0, "go": 0, "0042645": 0, "cellularcompon": 0, "onli": [0, 1, 2, 3, 4, 6, 8], "contextu": [0, 3], "mai": [0, 1, 2, 7, 8], "have": [0, 2, 7, 8], "addit": [0, 1, 2, 3, 8], "anoth": [0, 5], "same": 0, "compliant": [0, 1, 2, 3], "parameterless": 0, "don": 0, "t": [0, 6, 8], "distinct": 0, "instanc": [0, 1, 2, 3, 4], "index": [0, 1, 2, 3, 6], "non_canon": 0, "arax": 0, "term": [0, 1, 8], "participates_in": 0, "secondari": 0, "b": 0, "statu": [0, 2, 3, 4], "unknown": [0, 2, 6], "500": 0, "unexpect": [0, 8], "noncompli": 0, "vitamin": 0, "biolink_releas": [0, 8], "invalid": [0, 1, 4, 7], "descriptor": 0, "37565": 0, "smallmolecul": 0, "test": [0, 1, 2, 3], "raise_subject_ent": 0, "is_a": 0, "parent": [0, 1, 2, 4], "sinc": 0, "either": [0, 6, 8], "ontologi": 0, "doe": 0, "map": [0, 8], "onto": 0, "everi": [0, 8], "specif": [0, 1, 2, 3, 7, 8], "correspond": [0, 2, 3, 6, 7, 8], "field": [0, 7, 8], "templat": [0, 2], "found": [0, 1, 2, 8], "yaml": [0, 4, 6, 7], "file": [0, 3, 4, 6, 7, 8], "A": [0, 1, 2, 8], "page": 0, "also": [0, 1, 2, 3, 7, 8], "read": 0, "case": [0, 1, 3, 7, 8], "though": 0, "necessari": 0, "encod": [0, 3, 7], "suffix": [0, 7], "root": [0, 7], "filenam": [0, 6], "e": [0, 1, 2, 3, 4, 6, 7, 8], "g": [0, 1, 2, 4, 7, 8], "my_trapi_schema_1": 0, "beta5": [0, 7], "assum": [0, 1, 7], "delimit": [0, 2, 3, 6, 7], "lead": [0, 7], "underscor": [0, 7], "charact": [0, 2, 3, 4, 7], "simplist": 0, "pars": [0, 2], "root_path": 0, "replac": [0, 8], "semver_str": 0, "split": 0, "_": [0, 4], "trapiaccesserror": [0, 4], "trapischemavalid": [0, 2, 4], "call_trapi": [0, 4], "fix_nul": [0, 4], "load_schema": [0, 4], "map_semv": [0, 4], "openapi_to_jsonschema": [0, 4], "patch_schema": [0, 4], "mappingvalid": [0, 5], "check_node_edge_map": [0, 5], "bmtwrapper": [0, 2], "biolinkvalid": [0, 1, 2], "get_biolink_model_toolkit": [0, 2], "get_refer": [0, 2], "is_curi": [0, 2], "reportjsonencod": [0, 3], "trapigraphtyp": [0, 2, 3], "validationreport": [0, 2, 3, 4, 5], "codedictionari": [0, 6], "skip": [0, 3], "semver": [0, 2, 4], "util": [0, 2], "semvererror": [0, 7], "semverunderspecifi": [0, 7], "get_latest_vers": [0, 7], "refer": [0, 1, 2, 5], "unit": [0, 8], "guidanc": 0, "how": 0, "trapi_valid": 0, "py": 0, "avail": [0, 3, 6, 8], "pk": 0, "biomed": 0, "autonom": 0, "relai": 0, "specifi": [0, 1, 2, 3, 4, 6, 8], "endpoint": 0, "best": [0, 7], "For": [0, 1, 2, 3], "help": 0, "contain": [0, 1, 2, 3, 8], "singl": [0, 2, 3, 6, 8], "post": [0, 2, 4], "take": 0, "bodi": [0, 8], "_comment": 0, "latest": [0, 2, 4, 7], "onward": 0, "state": [0, 8], "schema_vers": 0, "modifi": 0, "slightli": 0, "interpret": 0, "given": [0, 1, 2, 3, 4, 6, 7, 8], "otherwis": [0, 1, 2, 3, 4, 6], "embed": 0, "becom": 0, "bmt": [0, 2], "suppress": [0, 2, 3], "most": [0, 1, 8], "done": 0, "dure": 0, "aragorn": 0, "panther": 0, "true": [0, 1, 2, 3, 4, 6, 8], "below": 0, "consist": 0, "structur": [0, 1, 2, 3], "tag": [0, 1, 2, 3, 4, 6, 7, 8], "valu": [0, 1, 2, 3, 7], "express": 0, "partial": [0, 7], "resolv": [0, 1, 2, 3, 6, 8], "minor": [0, 2, 4, 7], "patch": [0, 2, 4, 7], "graph": [0, 1, 2, 3, 5], "content": [0, 1, 2, 3, 4], "special": 0, "disabl": 0, "shown": 0, "ara": [0, 1, 2], "kp": [0, 1, 2], "involv": 0, "call": [0, 2, 3, 4], "curi": [0, 1, 2, 3, 8], "impli": 0, "primary_knowledge_sourc": [0, 2], "subsidiari": 0, "rule": 0, "attribute_type_id": [0, 8], "abstract": [0, 2, 3], "mixin": [0, 2], "mandatori": [0, 6], "should": [0, 2, 3, 6, 8], "its": [0, 1, 3, 8], "modul": [0, 3], "after": [0, 3], "certain": 0, "afterward": 0, "m": 0, "main": 0, "machin": 0, "form": [0, 1, 2, 8], "now": [0, 2], "view": 0, "localhost": 0, "doc": [0, 1, 6], "kind": 0, "input": [0, 1, 2, 3, 8], "resource_id": [0, 2], "resource_rol": 0, "analys": 0, "workflow": [0, 1], "lookup": 0, "get": [0, 1, 2, 3, 6], "back": 0, "miss": [0, 1, 2], "unmapped_prefix": 0, "issu": 0, "formal": 0, "insid": 0, "compos": 0, "first": [0, 1, 3], "directori": 0, "build": 0, "Then": 0, "up": 0, "d": 0, "onc": 0, "again": 0, "To": 0, "stop": [0, 1], "down": 0, "Of": 0, "cours": 0, "abov": [0, 7], "command": 0, "user": [0, 2, 3, 8], "suit": 0, "need": [0, 1, 8], "implement": [0, 3], "uvicorn": 0, "evolv": 0, "along": 0, "progress": 0, "ncat": 0, "pertain": [0, 1], "synopsi": 0, "evolut": 0, "veri": 0, "preliminari": 0, "obsolet": 0, "had": [0, 8], "base": [0, 1, 2, 3, 4, 5, 6, 7], "later": 0, "iter": [0, 3], "ad": 0, "flat": [0, 3], "arcan": 0, "all": [0, 1, 2, 3, 4, 5, 6, 8], "serv": 0, "collect": [0, 6], "disciplin": 0, "codifi": 0, "manner": 0, "master": [0, 1], "hierarch": 0, "still": 0, "reliabl": 0, "8": [0, 3], "mainli": [0, 2], "spuriou": 0, "reflect": 0, "non": [0, 2, 3, 8], "chang": 0, "restructur": 0, "target": [0, 1, 2, 3, 4, 8], "url": [0, 3, 4], "log": 0, "readm": 0, "detail": [0, 1], "bug": 0, "featur": 0, "ask": 0, "question": 0, "under": 0, "mit": 0, "default_test": [1, 2, 3, 4, 5], "default_target": [1, 2, 3, 4, 5], "target_proven": [1, 2], "bool": [1, 2, 3, 4, 5, 6, 7], "suppress_empty_data_warn": 1, "an": [1, 2, 3, 4, 7, 8], "overal": 1, "conform": [1, 4], "count_nod": [1, 2], "get_attribute_type_exclus": [1, 2], "get_bmt": [1, 2], "has_dangling_nod": [1, 2], "has_valid_node_inform": [1, 2], "is_trapi_1_4_or_lat": 1, "is_treat": [1, 2], "merge_identified_messag": [1, 2, 3, 4, 5], "merge_scoped_messag": [1, 2, 3, 4, 5], "reset_node_info": [1, 2], "validate_input_edge_nod": [1, 2], "category_match": 1, "source_categori": 1, "target_categori": 1, "each": [1, 8], "union": 1, "ancestr": 1, "least": [1, 2, 8], "match": 1, "whose": [1, 2, 3], "hierarchi": [1, 8], "against": [1, 2, 4, 8], "could": [1, 3, 8], "max_kg_edg": 1, "int": [1, 3, 7], "max_result": 1, "One": [1, 8], "queri": [1, 2, 3, 4, 8], "includ": [1, 2, 4, 8], "design": [1, 7], "releas": [1, 2, 4, 7, 8], "high": 1, "github": [1, 4, 7], "reasonerapi": 1, "blob": [1, 3], "md": [1, 6], "python": [1, 2, 3, 4], "three": 1, "entri": [1, 2, 6, 8], "qgraph": [1, 4], "output": [1, 2, 3, 4, 8], "sub": 1, "from": [1, 2, 3, 4, 6, 7, 8], "resourc": [1, 8], "result": [1, 2, 4], "annot": 1, "bind": [1, 8], "point": 1, "repres": [1, 3], "answer": 1, "subgraph": 1, "satisfi": [1, 8], "constraint": [1, 2, 6], "maximum": [1, 3], "number": [1, 3, 7], "zero": 1, "us": [1, 2, 3, 4, 8], "get_alias": 1, "cliqu": [1, 8], "relat": [1, 2, 3, 8], "normal": [1, 2, 8], "guarante": 1, "succe": 1, "alias": [1, 8], "howev": 1, "param": [1, 2, 3, 4], "ar": [1, 2, 3, 4, 6, 8], "itself": 1, "encount": 1, "has_valid_knowledge_graph": 1, "edges_limit": 1, "integ": 1, "has_valid_query_graph": 1, "has_valid_result": 1, "sample_s": 1, "resolve_testcase_nod": 1, "testcas": 1, "tupl": [1, 2, 6], "direct": [1, 3, 7, 8], "ontolog": [1, 8], "diseas": 1, "request": 1, "must": [1, 8], "access": [1, 3], "about": 1, "kg": 1, "applic": [1, 3, 6], "static": [1, 2, 3, 6], "sample_graph": 1, "process": 1, "subsampl": 1, "origin": [1, 3, 8], "size": 1, "subset": 1, "sample_result": 1, "sanitize_workflow": 1, "cannot": [1, 8], "further": 1, "due": 1, "temporari": 1, "workaround": 1, "sanit": 1, "discretionari": 1, "remov": [1, 8], "temporarili": 1, "unwarr": 1, "failur": [1, 2], "testcase_edge_bind": 1, "query_edg": 1, "target_edge_id": 1, "testcase_input_found_in_respons": 1, "alreadi": [1, 2, 3], "well": [1, 2, 8], "ought": [1, 8], "testcase_node_bind": 1, "query_nod": 1, "subject_id": 1, "subject_query_id": 1, "object_id": [1, 2], "object_query_id": 1, "query_id": [1, 8], "": [1, 2, 8], "bound": 1, "spec": 1, "testcase_node_category_found": 1, "node_id": [1, 2, 8], "node_detail": 1, "concept": [1, 2], "interest": 1, "catalog": [1, 2, 8], "being": [1, 2, 3, 4, 8], "individu": 1, "testcase_node_found": 1, "target_id_alias": 1, "presenc": [1, 3, 6], "proper": [1, 8], "too": 1, "overlap": 1, "testcase_result_found": 1, "p": [1, 2, 8], "o": [1, 2, 3, 8], "wa": [1, 2, 8], "validate_bind": 1, "q_node_entri": 1, "target_id": 1, "target_query_id": 1, "node_binding_detail": 1, "search": 1, "ident": 1, "get_biolink_vers": 2, "rtype": 2, "get_inverse_pred": 2, "logic": 2, "robustli": 2, "exist": 2, "invers": 2, "sought": 2, "is_symmetr": 2, "element": 2, "symmetr": 2, "slot": [2, 8], "reset_biolink_vers": 2, "reset": [2, 3, 4], "track": [2, 3, 4], "new": [2, 3, 4], "trapi": [2, 3, 7], "category_inclus": 2, "biologicalent": 2, "informationcontentent": 2, "predicate_inclus": 2, "interacts_with": 2, "build_source_trail": 2, "source_trail": [2, 3], "upward": 2, "empti": [2, 3, 4, 6, 7], "upstream_resource_id": 2, "upstream": 2, "audit": [2, 3], "trail": [2, 3], "topmost": 2, "check_biolink_model_compli": 2, "graph_typ": [2, 3], "activ": 2, "check_biolink_model_compliance_of_input_edg": 2, "subject_categori": 2, "anatomicalent": 2, "object_categori": 2, "subclass_of": 2, "uberon": 2, "0005453": 2, "0035769": 2, "basic": 2, "get_node_categori": 2, "associ": [2, 6, 8], "get_node_identifi": 2, "regist": [2, 6, 8], "get_result": 2, "get_target_proven": 2, "prefix": [2, 6, 7, 8], "metadata": [2, 3, 4], "merg": [2, 3, 4], "second": [2, 3, 4], "minimum_required_biolink_vers": 2, "equal": [2, 4], "newer": [2, 4], "than": [2, 4, 8], "minimum_vers": [2, 4], "report_head": [2, 3, 4], "titl": [2, 3, 4], "compact_format": [2, 3, 4], "suitabl": [2, 3, 4, 8], "header": [2, 3, 4], "reason": [2, 3, 4, 6, 8], "print": [2, 3, 4], "out": [2, 3, 4, 6], "whether": [2, 3, 4], "compact": [2, 3, 4], "extra": [2, 3, 4], "line": [2, 3, 4], "feed": [2, 3, 4], "space": [2, 3, 4], "around": [2, 3, 4], "control": [2, 3, 4, 8], "underlin": [2, 3, 4], "set_nod": 2, "record": [2, 3, 7, 8], "to_dict": [2, 3, 4], "export": [2, 3, 4], "validate_agent_typ": 2, "agent_typ": 2, "detect": [2, 3, 5], "seen": 2, "previous": 2, "validate_attribute_constraint": 2, "attribut": [2, 6], "purpos": [2, 6], "captur": [2, 3], "self": [2, 3], "validate_attribut": 2, "order": 2, "validate_biolink": 2, "complianc": [2, 8], "validate_categori": 2, "classdefinit": 2, "concret": [2, 8], "deprec": 2, "both": 2, "accept": [2, 3, 8], "silent": 2, "ignor": [2, 7, 8], "consid": [2, 8], "thu": [2, 3], "label": [2, 3], "put": 2, "validate_element_statu": 2, "ignore_graph_typ": [2, 3], "signal": 2, "enclos": 2, "differenti": [2, 3], "validate_graph_edg": 2, "properti": [2, 8], "relationship": 2, "validate_graph_nod": 2, "validate_infor": 2, "semicolon": 2, "code": [2, 3], "candid": 2, "category_nam": 2, "validate_knowledge_level": 2, "knowledge_level": 2, "validate_pred": 2, "meta": 2, "natur": 2, "notabl": 2, "hard": 2, "explicit": [2, 3], "commun": 2, "via": 2, "validate_proven": 2, "found_ara_knowledge_sourc": 2, "found_kp_knowledge_sourc": 2, "found_primary_knowledge_sourc": 2, "survei": 2, "pre": 2, "aggreg": [2, 3], "discov": 2, "validate_qualifier_constraint": 2, "qualifi": 2, "validate_qualifier_entri": 2, "subcod": 2, "qualifier_constraint": 2, "qualifier_set": 2, "possibli": [2, 6, 7], "validate_qualifi": 2, "validate_slot_valu": 2, "slot_nam": 2, "entiti": 2, "validate_sourc": 2, "beta": 2, "caller": 2, "skipkei": 3, "ensure_ascii": 3, "check_circular": 3, "allow_nan": 3, "sort_kei": 3, "indent": 3, "separ": 3, "jsonencod": 3, "serializ": 3, "rais": [3, 4], "typeerror": 3, "support": 3, "arbitrari": 3, "def": 3, "try": 3, "pass": [3, 7], "els": 3, "enum": [3, 8], "input_edg": 3, "manag": 3, "conveni": 3, "although": [3, 8], "within": [3, 4, 8], "pertin": 3, "default_trapi_vers": 3, "add_messag": 3, "new_messag": 3, "batch": 3, "kei": [3, 6], "apply_valid": 3, "validation_method": 3, "arg": 3, "kwarg": 3, "argument": 3, "posit": 3, "initi": [3, 7], "keyword": 3, "id_row": 3, "msg_row": 3, "_io": 3, "textiowrapp": 3, "mode": [3, 8], "w": 3, "utf": 3, "devic": 3, "suppli": 3, "autogener": 3, "per": 3, "mean": 3, "parameter": 3, "row": 3, "blank": 3, "insert": 3, "escap": 3, "n": 3, "dump_all_messag": 3, "render": 3, "dump_crit": 3, "dump_error": 3, "dump_info": 3, "dump_messages_typ": 3, "message_typ": 3, "messagetyp": 3, "dump_skip": 3, "dump_warn": 3, "copi": [3, 6], "get_all_messages_of_typ": 3, "message_partit": 3, "harvest": 3, "get_crit": 3, "get_default_target": 3, "get_default_test": 3, "get_error": 3, "get_info": 3, "get_message_typ": [3, 6], "get_messages_by_target": 3, "block": [3, 8], "messages_by_test": 3, "get_messages_by_test": 3, "message_catalog": 3, "caution": 3, "taken": [3, 6], "mutat": 3, "get_messages_of_typ": 3, "get_skip": 3, "get_warn": 3, "has_crit": 3, "has_error": 3, "has_inform": 3, "has_message_typ": 3, "has_skip": 3, "has_warn": 3, "is_strict_valid": 3, "intern": 3, "merge_coded_messag": 3, "so": 3, "far": 3, "mutabl": 3, "aggregr": 3, "updat": 3, "side": 3, "effect": 3, "dot": [3, 6], "reset_default_target": 3, "uri": 3, "reset_default_test": 3, "test_case_has_validation_error": 3, "similar": 3, "what": 3, "runtimeerror": 4, "api": 4, "get_trapi_vers": 4, "is_valid_trapi_queri": 4, "make": 4, "sure": 4, "syntact": 4, "subschema": 4, "querygraph": 4, "knowledgegraph": 4, "host": 4, "trapivalid": 4, "minimum_required_trapi_vers": 4, "reset_trapi_vers": 4, "validationerror": 4, "jsonschema": 4, "readthedoc": 4, "io": 4, "en": 4, "async": 4, "trapi_messag": 4, "fix": 4, "nullabl": [4, 8], "load": 4, "branch": [4, 7], "local": 4, "extens": [4, 7], "referenc": 4, "convert": 4, "memori": 4, "represent": 4, "valid": 5, "dangl": 5, "between": 5, "more": [5, 6, 8], "check_dangling_refer": 5, "validation_cod": 6, "code_dictionari": 6, "get_descript": 6, "get_message_context": 6, "get_message_templ": 6, "validation_code_tag": 6, "code_dictionary_fil": 6, "home": 6, "runner": 6, "work": 6, "descript": [6, 8], "classmethod": [6, 7], "displai": 6, "add_prefix": 6, "scoped_messag": 6, "actual": 6, "prepend": 6, "decod": 6, "filter_copy_by_facet": 6, "tree": 6, "facet": 6, "subtre": 6, "filter": 6, "leaf": 6, "leav": 6, "simpli": 6, "get_code_entri": 6, "ok": 6, "termin": 6, "indic": [6, 8], "get_code_subtre": 6, "is_leaf": 6, "doesn": 6, "markdown": 6, "validation_codes_dictionari": 6, "default_codes_documentation_fil": 6, "success": [6, 8], "prereleas": 7, "buildmetadata": 7, "namedtupl": 7, "alia": 7, "from_str": 7, "ignore_prefix": 7, "core_field": 7, "ext_field": 7, "augment": 7, "alphabet": 7, "v": 7, "befor": 7, "my_schema_3": 7, "where": 7, "v1": 7, "core": 7, "explicitli": 7, "extend": 7, "mayb": 7, "underspecifi": 7, "release_tag": 7, "repositori": 7, "directli": 7, "json_path": 8, "locat": 8, "prepar": 8, "start": 8, "attempt": 8, "abnorm": 8, "200": 8, "server": 8, "statement": 8, "review": 8, "underli": 8, "caus": 8, "total": 8, "repli": 8, "expected_categori": 8, "observed_categori": 8, "fail": 8, "arrai": 8, "even": 8, "did": 8, "nor": 8, "output_node_bind": 8, "assert": 8, "known": 8, "permit": 8, "defin": 8, "boolean": 8, "present": 8, "qualifier_type_id": 8, "qualified_pred": 8, "qualifier_valu": 8, "threw": 8, "No": 8, "add": 8, "vocabulari": 8, "attribute_id": 8, "respect": 8, "requir": 8, "compli": 8, "ones": 8, "enumer": 8, "retrievalsourc": 8, "come": 8, "unregist": 8, "resourcerol": 8, "undefin": 8, "unrecogn": 8, "short": 8, "querynottravers": 8, "kpsnotavail": 8, "merit": 8, "boundari": 8, "didn": 8, "prefer": 8, "canon": 8, "letter": 8, "correct": 8, "step": 8, "null": 8, "futur": 8, "unmap": 8, "unmapped_id": 8, "incomplet": 8, "select": 8, "At": 8, "unus": 8, "among": 8, "id_prefix": 8, "without": 8, "interfac": 8, "pleas": 8, "usual": 8, "drawn": 8, "association_slot": 8, "toler": 8, "multipl": 8, "recommend": 8, "explan": 8, "tripl": 8, "exclude_test": 8, "when": 8, "asset": 8}, "objects": {"reasoner_validator": [[2, 0, 0, "-", "biolink"], [3, 0, 0, "-", "report"], [4, 0, 0, "-", "trapi"], [6, 0, 0, "-", "validation_codes"], [1, 0, 0, "-", "validator"], [7, 0, 0, "-", "versioning"]], "reasoner_validator.biolink": [[2, 1, 1, "", "BMTWrapper"], [2, 1, 1, "", "BiolinkValidator"], [2, 4, 1, "", "get_biolink_model_toolkit"], [2, 4, 1, "", "get_reference"], [2, 4, 1, "", "is_curie"]], "reasoner_validator.biolink.BMTWrapper": [[2, 2, 1, "", "get_biolink_version"], [2, 2, 1, "", "get_bmt"], [2, 2, 1, "", "get_inverse_predicate"], [2, 2, 1, "", "is_symmetric"], [2, 2, 1, "", "reset_biolink_version"]], "reasoner_validator.biolink.BiolinkValidator": [[2, 3, 1, "", "CATEGORY_INCLUSIONS"], [2, 3, 1, "", "PREDICATE_INCLUSIONS"], [2, 2, 1, "", "build_source_trail"], [2, 2, 1, "", "check_biolink_model_compliance"], [2, 2, 1, "", "check_biolink_model_compliance_of_input_edge"], [2, 2, 1, "", "count_node"], [2, 2, 1, "", "get_attribute_type_exclusions"], [2, 2, 1, "", "get_biolink_version"], [2, 2, 1, "", "get_node_categories"], [2, 2, 1, "", "get_node_identifiers"], [2, 2, 1, "", "get_result"], [2, 2, 1, "", "get_target_provenance"], [2, 2, 1, "", "has_dangling_nodes"], [2, 2, 1, "", "has_valid_node_information"], [2, 2, 1, "", "is_treats"], [2, 2, 1, "", "merge"], [2, 2, 1, "", "minimum_required_biolink_version"], [2, 2, 1, "", "report_header"], [2, 2, 1, "", "reset_biolink_version"], [2, 2, 1, "", "reset_node_info"], [2, 2, 1, "", "set_nodes"], [2, 2, 1, "", "to_dict"], [2, 2, 1, "", "validate_agent_type"], [2, 2, 1, "", "validate_attribute_constraints"], [2, 2, 1, "", "validate_attributes"], [2, 2, 1, "", "validate_biolink"], [2, 2, 1, "", "validate_category"], [2, 2, 1, "", "validate_element_status"], [2, 2, 1, "", "validate_graph_edge"], [2, 2, 1, "", "validate_graph_node"], [2, 2, 1, "", "validate_infores"], [2, 2, 1, "", "validate_input_edge_node"], [2, 2, 1, "", "validate_knowledge_level"], [2, 2, 1, "", "validate_predicate"], [2, 2, 1, "", "validate_provenance"], [2, 2, 1, "", "validate_qualifier_constraints"], [2, 2, 1, "", "validate_qualifier_entry"], [2, 2, 1, "", "validate_qualifiers"], [2, 2, 1, "", "validate_slot_value"], [2, 2, 1, "", "validate_sources"]], "reasoner_validator.report": [[3, 1, 1, "", "ReportJsonEncoder"], [3, 1, 1, "", "TRAPIGraphType"], [3, 1, 1, "", "ValidationReporter"]], "reasoner_validator.report.ReportJsonEncoder": [[3, 2, 1, "", "default"]], "reasoner_validator.report.TRAPIGraphType": [[3, 3, 1, "", "Input_Edge"], [3, 3, 1, "", "Knowledge_Graph"], [3, 3, 1, "", "Query_Graph"], [3, 2, 1, "", "label"]], "reasoner_validator.report.ValidationReporter": [[3, 3, 1, "", "DEFAULT_TRAPI_VERSION"], [3, 2, 1, "", "add_messages"], [3, 2, 1, "", "apply_validation"], [3, 2, 1, "", "dump"], [3, 2, 1, "", "dump_all_messages"], [3, 2, 1, "", "dump_critical"], [3, 2, 1, "", "dump_errors"], [3, 2, 1, "", "dump_info"], [3, 2, 1, "", "dump_messages_type"], [3, 2, 1, "", "dump_skipped"], [3, 2, 1, "", "dump_warnings"], [3, 2, 1, "", "dumps"], [3, 2, 1, "", "get_all_messages"], [3, 2, 1, "", "get_all_messages_of_type"], [3, 2, 1, "", "get_critical"], [3, 2, 1, "", "get_default_target"], [3, 2, 1, "", "get_default_test"], [3, 2, 1, "", "get_errors"], [3, 2, 1, "", "get_info"], [3, 2, 1, "", "get_message_type"], [3, 2, 1, "", "get_messages_by_target"], [3, 2, 1, "", "get_messages_by_test"], [3, 2, 1, "", "get_messages_of_type"], [3, 2, 1, "", "get_skipped"], [3, 2, 1, "", "get_warnings"], [3, 2, 1, "", "has_critical"], [3, 2, 1, "", "has_errors"], [3, 2, 1, "", "has_information"], [3, 2, 1, "", "has_message_type"], [3, 2, 1, "", "has_messages"], [3, 2, 1, "", "has_skipped"], [3, 2, 1, "", "has_warnings"], [3, 2, 1, "", "is_strict_validation"], [3, 2, 1, "", "merge"], [3, 2, 1, "", "merge_coded_messages"], [3, 2, 1, "", "merge_identified_messages"], [3, 2, 1, "", "merge_scoped_messages"], [3, 2, 1, "", "report"], [3, 2, 1, "", "report_header"], [3, 2, 1, "", "reset_default_target"], [3, 2, 1, "", "reset_default_test"], [3, 2, 1, "", "test_case_has_validation_errors"], [3, 2, 1, "", "to_dict"]], "reasoner_validator.trapi": [[4, 5, 1, "", "TRAPIAccessError"], [4, 1, 1, "", "TRAPISchemaValidator"], [4, 4, 1, "", "call_trapi"], [4, 4, 1, "", "fix_nullable"], [4, 4, 1, "", "load_schema"], [4, 4, 1, "", "map_semver"], [5, 0, 0, "-", "mapping"], [4, 4, 1, "", "openapi_to_jsonschema"], [4, 4, 1, "", "patch_schema"]], "reasoner_validator.trapi.TRAPISchemaValidator": [[4, 3, 1, "", "default_target"], [4, 3, 1, "", "default_test"], [4, 2, 1, "", "get_trapi_version"], [4, 2, 1, "", "is_valid_trapi_query"], [4, 2, 1, "", "merge"], [4, 3, 1, "", "messages"], [4, 2, 1, "", "minimum_required_trapi_version"], [4, 2, 1, "", "report_header"], [4, 2, 1, "", "reset_trapi_version"], [4, 3, 1, "", "strict_validation"], [4, 2, 1, "", "to_dict"], [4, 2, 1, "", "validate"]], "reasoner_validator.trapi.mapping": [[5, 1, 1, "", "MappingValidator"], [5, 4, 1, "", "check_node_edge_mappings"]], "reasoner_validator.trapi.mapping.MappingValidator": [[5, 2, 1, "", "check_dangling_references"], [5, 3, 1, "", "default_target"], [5, 3, 1, "", "default_test"], [5, 3, 1, "", "messages"], [5, 3, 1, "", "strict_validation"]], "reasoner_validator.validation_codes": [[6, 1, 1, "", "CodeDictionary"]], "reasoner_validator.validation_codes.CodeDictionary": [[6, 3, 1, "", "CODE_DICTIONARY_FILE"], [6, 3, 1, "", "CONTEXT"], [6, 3, 1, "", "DESCRIPTION"], [6, 3, 1, "", "MESSAGE"], [6, 3, 1, "", "code_dictionary"], [6, 2, 1, "", "display"], [6, 2, 1, "", "filter_copy_by_facet"], [6, 2, 1, "", "get_code_entry"], [6, 2, 1, "", "get_code_subtree"], [6, 2, 1, "", "get_description"], [6, 2, 1, "", "get_message_context"], [6, 2, 1, "", "get_message_template"], [6, 2, 1, "", "get_message_type"], [6, 2, 1, "", "markdown"], [6, 2, 1, "", "validation_code_tag"]], "reasoner_validator.validator": [[1, 1, 1, "", "TRAPIResponseValidator"]], "reasoner_validator.validator.TRAPIResponseValidator": [[1, 2, 1, "", "category_matched"], [1, 2, 1, "", "check_compliance_of_trapi_response"], [1, 2, 1, "", "get_aliases"], [1, 2, 1, "", "has_valid_knowledge_graph"], [1, 2, 1, "", "has_valid_query_graph"], [1, 2, 1, "", "has_valid_results"], [1, 2, 1, "", "is_trapi_1_4_or_later"], [1, 2, 1, "", "resolve_testcase_node"], [1, 2, 1, "", "sample_graph"], [1, 2, 1, "", "sample_results"], [1, 2, 1, "", "sanitize_workflow"], [1, 2, 1, "", "testcase_edge_bindings"], [1, 2, 1, "", "testcase_input_found_in_response"], [1, 2, 1, "", "testcase_node_bindings"], [1, 2, 1, "", "testcase_node_category_found"], [1, 2, 1, "", "testcase_node_found"], [1, 2, 1, "", "testcase_result_found"], [1, 2, 1, "", "validate_binding"]], "reasoner_validator.versioning": [[7, 1, 1, "", "SemVer"], [7, 5, 1, "", "SemVerError"], [7, 5, 1, "", "SemVerUnderspecified"], [7, 4, 1, "", "get_latest_version"]], "reasoner_validator.versioning.SemVer": [[7, 3, 1, "", "buildmetadata"], [7, 2, 1, "", "from_string"], [7, 3, 1, "", "major"], [7, 3, 1, "", "minor"], [7, 3, 1, "", "patch"], [7, 3, 1, "", "prefix"], [7, 3, 1, "", "prerelease"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"reason": 0, "valid": [0, 1, 2, 3, 4, 6, 8], "instal": 0, "As": 0, "pypi": 0, "packag": 0, "from": 0, "github": 0, "basic": 0, "programmat": 0, "usag": 0, "python": 0, "api": 0, "run": 0, "against": 0, "an": 0, "ar": 0, "uuid": 0, "result": [0, 5, 8], "us": 0, "local": 0, "trapi": [0, 1, 4, 5, 8], "request": [0, 8], "queri": 0, "web": 0, "servic": 0, "directli": 0, "typic": 0, "output": 0, "code": [0, 6, 8], "definit": 0, "within": 0, "docker": 0, "quick": 0, "histori": 0, "releas": 0, "commun": 0, "contribut": 0, "support": 0, "licens": 0, "respons": [1, 8], "biolink": [2, 8], "report": 3, "schema": 4, "map": 5, "dictionari": [6, 8], "semver": 7, "version": 7, "util": 7, "critic": 8, "error": 8, "invalid": 8, "unexpected_http_cod": 8, "model": 8, "noncompli": 8, "empti": 8, "messag": 8, "query_graph": 8, "miss": 8, "knowledge_graph": 8, "node": 8, "categori": 8, "unmatch": 8, "identifi": 8, "not_curi": 8, "edg": 8, "node_bind": 8, "kei": 8, "not_arrai": 8, "missing_bind": 8, "input_edg": 8, "not_a_categori": 8, "unknown": 8, "id": 8, "predic": 8, "abstract": 8, "mixin": 8, "uninform": 8, "is_set": 8, "not_boolean": 8, "subject": 8, "missing_from_nod": 8, "object": 8, "empty_arrai": 8, "attribute_constraint": 8, "qualifier_constraint": 8, "qualifier_set": 8, "qualifi": 8, "type_id": 8, "valu": 8, "not_a_pred": 8, "missing_categori": 8, "empty_id": 8, "not_concret": 8, "empty_categori": 8, "attribut": 8, "proven": 8, "infor": 8, "missing_primari": 8, "knowledge_level": 8, "duplic": 8, "agent_typ": 8, "sourc": 8, "retrieval_sourc": 8, "resource_id": 8, "upstream_resource_id": 8, "resource_rol": 8, "warn": 8, "element": 8, "rang": 8, "unspecifi": 8, "statu": 8, "schema_vers": 8, "biolink_vers": 8, "imprecis": 8, "unresolv": 8, "no_equivalent_identifi": 8, "no_preferred_identifi": 8, "no_alias": 8, "namespac": 8, "non_canon": 8, "workflow": 8, "runner_paramet": 8, "paramet": 8, "graph": 8, "deprec": 8, "unmapped_to_categori": 8, "dangl": 8, "unmapped_prefix": 8, "name": 8, "abstract_or_mixin": 8, "is_categori": 8, "is_pred": 8, "not_association_slot": 8, "non_biolink_prefix": 8, "multiple_primari": 8, "ara": 8, "kp": 8, "treat": 8, "support_graph": 8, "inform": 8, "info": 8, "parent": 8, "match": 8, "exclud": 8, "compliant": 8, "skip": 8, "test": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Reasoner Validator": [[0, "reasoner-validator"]], "Installation": [[0, "installation"]], "As Pypi Package": [[0, "as-pypi-package"]], "From Github": [[0, "from-github"]], "Basic Programmatic Usage": [[0, "basic-programmatic-usage"]], "Python API": [[0, "python-api"]], "Running Validation against an ARS UUID Result(*) or using a Local TRAPI Request Query": [[0, "running-validation-against-an-ars-uuid-result-or-using-a-local-trapi-request-query"]], "Validation Run as a Web Service": [[0, "validation-run-as-a-web-service"]], "Web Service API": [[0, "web-service-api"]], "Running the Web Service Directly": [[0, "running-the-web-service-directly"]], "Typical Output": [[0, "typical-output"]], "Validation Code Definitions": [[0, "validation-code-definitions"]], "Running the Web Service within Docker": [[0, "running-the-web-service-within-docker"]], "Quick History of Releases": [[0, "quick-history-of-releases"]], "Community": [[0, "community"]], "Contribute": [[0, "contribute"]], "Support": [[0, "support"]], "License": [[0, "license"]], "TRAPI Response Validation": [[1, "module-reasoner_validator.validator"]], "Biolink Validation": [[2, "module-reasoner_validator.biolink"]], "Validator Reporter": [[3, "module-reasoner_validator.report"]], "TRAPI Schema Validation": [[4, "module-reasoner_validator.trapi"]], "TRAPI Result Mapping": [[5, "module-reasoner_validator.trapi.mapping"]], "Validation Codes Dictionary": [[6, "module-reasoner_validator.validation_codes"], [8, "validation-codes-dictionary"]], "SemVer Versioning Utilities": [[7, "module-reasoner_validator.versioning"]], "Critical Error": [[8, "critical-error"]], "critical.trapi.validation": [[8, "critical-trapi-validation"]], "critical.trapi.request.invalid": [[8, "critical-trapi-request-invalid"]], "critical.trapi.response.unexpected_http_code": [[8, "critical-trapi-response-unexpected-http-code"]], "Error": [[8, "error"]], "error.biolink.model.noncompliance": [[8, "error-biolink-model-noncompliance"]], "error.trapi.response.empty": [[8, "error-trapi-response-empty"]], "error.trapi.response.message.empty": [[8, "error-trapi-response-message-empty"]], "error.trapi.response.message.query_graph.missing": [[8, "error-trapi-response-message-query-graph-missing"]], "error.trapi.response.message.query_graph.empty": [[8, "error-trapi-response-message-query-graph-empty"]], "error.trapi.response.message.knowledge_graph.missing": [[8, "error-trapi-response-message-knowledge-graph-missing"]], "error.trapi.response.message.knowledge_graph.empty": [[8, "error-trapi-response-message-knowledge-graph-empty"]], "error.trapi.response.message.knowledge_graph.node.missing": [[8, "error-trapi-response-message-knowledge-graph-node-missing"]], "error.trapi.response.message.knowledge_graph.node.category.unmatched": [[8, "error-trapi-response-message-knowledge-graph-node-category-unmatched"]], "error.trapi.response.message.knowledge_graph.node.identifier.not_curie": [[8, "error-trapi-response-message-knowledge-graph-node-identifier-not-curie"]], "error.trapi.response.message.knowledge_graph.edge.missing": [[8, "error-trapi-response-message-knowledge-graph-edge-missing"]], "error.trapi.response.message.result.missing": [[8, "error-trapi-response-message-result-missing"]], "error.trapi.response.message.result.node_binding.key.missing": [[8, "error-trapi-response-message-result-node-binding-key-missing"]], "error.trapi.response.message.results.missing": [[8, "error-trapi-response-message-results-missing"]], "error.trapi.response.message.results.empty": [[8, "error-trapi-response-message-results-empty"]], "error.trapi.response.message.results.not_array": [[8, "error-trapi-response-message-results-not-array"]], "error.trapi.response.message.results.missing_bindings": [[8, "error-trapi-response-message-results-missing-bindings"]], "error.input_edge.node.category.missing": [[8, "error-input-edge-node-category-missing"]], "error.input_edge.node.category.not_a_category": [[8, "error-input-edge-node-category-not-a-category"]], "error.input_edge.node.category.unknown": [[8, "error-input-edge-node-category-unknown"]], "error.input_edge.node.id.missing": [[8, "error-input-edge-node-id-missing"]], "error.input_edge.predicate.missing": [[8, "error-input-edge-predicate-missing"]], "error.input_edge.predicate.unknown": [[8, "error-input-edge-predicate-unknown"]], "error.input_edge.predicate.abstract": [[8, "error-input-edge-predicate-abstract"]], "error.input_edge.predicate.mixin": [[8, "error-input-edge-predicate-mixin"]], "error.input_edge.predicate.invalid": [[8, "error-input-edge-predicate-invalid"]], "error.query_graph.nodes.uninformative": [[8, "error-query-graph-nodes-uninformative"]], "error.query_graph.node.category.missing": [[8, "error-query-graph-node-category-missing"]], "error.query_graph.node.category.not_a_category": [[8, "error-query-graph-node-category-not-a-category"]], "error.query_graph.node.category.unknown": [[8, "error-query-graph-node-category-unknown"]], "error.query_graph.node.ids.not_array": [[8, "error-query-graph-node-ids-not-array"]], "error.query_graph.node.categories.not_array": [[8, "error-query-graph-node-categories-not-array"]], "error.query_graph.node.is_set.not_boolean": [[8, "error-query-graph-node-is-set-not-boolean"]], "error.query_graph.edge.subject.missing": [[8, "error-query-graph-edge-subject-missing"]], "error.query_graph.edge.subject.missing_from_nodes": [[8, "error-query-graph-edge-subject-missing-from-nodes"]], "error.query_graph.edge.object.missing": [[8, "error-query-graph-edge-object-missing"]], "error.query_graph.edge.object.missing_from_nodes": [[8, "error-query-graph-edge-object-missing-from-nodes"]], "error.query_graph.edge.predicate.missing": [[8, "error-query-graph-edge-predicate-missing"]], "error.query_graph.edge.predicate.unknown": [[8, "error-query-graph-edge-predicate-unknown"]], "error.query_graph.edge.predicate.not_array": [[8, "error-query-graph-edge-predicate-not-array"]], "error.query_graph.edge.predicate.empty_array": [[8, "error-query-graph-edge-predicate-empty-array"]], "error.query_graph.edge.predicate.abstract": [[8, "error-query-graph-edge-predicate-abstract"]], "error.query_graph.edge.predicate.mixin": [[8, "error-query-graph-edge-predicate-mixin"]], "error.query_graph.edge.predicate.invalid": [[8, "error-query-graph-edge-predicate-invalid"]], "error.query_graph.edge.attribute_constraints.not_array": [[8, "error-query-graph-edge-attribute-constraints-not-array"]], "error.query_graph.edge.qualifier_constraints.qualifier_set.empty": [[8, "error-query-graph-edge-qualifier-constraints-qualifier-set-empty"]], "error.query_graph.edge.qualifier_constraints.qualifier_set.qualifier.type_id.unknown": [[8, "error-query-graph-edge-qualifier-constraints-qualifier-set-qualifier-type-id-unknown"]], "error.query_graph.edge.qualifier_constraints.qualifier_set.qualifier.value.not_a_predicate": [[8, "error-query-graph-edge-qualifier-constraints-qualifier-set-qualifier-value-not-a-predicate"]], "error.query_graph.edge.qualifier_constraints.qualifier_set.qualifier.invalid": [[8, "error-query-graph-edge-qualifier-constraints-qualifier-set-qualifier-invalid"]], "error.knowledge_graph.nodes.empty": [[8, "error-knowledge-graph-nodes-empty"]], "error.knowledge_graph.nodes.uninformative": [[8, "error-knowledge-graph-nodes-uninformative"]], "error.knowledge_graph.edges.empty": [[8, "error-knowledge-graph-edges-empty"]], "error.knowledge_graph.node.id.missing": [[8, "error-knowledge-graph-node-id-missing"]], "error.knowledge_graph.node.category.missing": [[8, "error-knowledge-graph-node-category-missing"]], "error.knowledge_graph.node.category.not_a_category": [[8, "error-knowledge-graph-node-category-not-a-category"]], "error.knowledge_graph.node.category.unknown": [[8, "error-knowledge-graph-node-category-unknown"]], "error.knowledge_graph.node.missing_categories": [[8, "error-knowledge-graph-node-missing-categories"]], "error.knowledge_graph.node.ids.not_array": [[8, "error-knowledge-graph-node-ids-not-array"]], "error.knowledge_graph.node.empty_ids": [[8, "error-knowledge-graph-node-empty-ids"]], "error.knowledge_graph.node.categories.not_array": [[8, "error-knowledge-graph-node-categories-not-array"]], "error.knowledge_graph.node.categories.not_concrete": [[8, "error-knowledge-graph-node-categories-not-concrete"]], "error.knowledge_graph.node.empty_categories": [[8, "error-knowledge-graph-node-empty-categories"]], "error.knowledge_graph.node.is_set.not_boolean": [[8, "error-knowledge-graph-node-is-set-not-boolean"]], "error.knowledge_graph.edge.subject.missing": [[8, "error-knowledge-graph-edge-subject-missing"]], "error.knowledge_graph.edge.subject.missing_from_nodes": [[8, "error-knowledge-graph-edge-subject-missing-from-nodes"]], "error.knowledge_graph.edge.object.missing": [[8, "error-knowledge-graph-edge-object-missing"]], "error.knowledge_graph.edge.object.missing_from_nodes": [[8, "error-knowledge-graph-edge-object-missing-from-nodes"]], "error.knowledge_graph.edge.predicate.missing": [[8, "error-knowledge-graph-edge-predicate-missing"]], "error.knowledge_graph.edge.predicate.unknown": [[8, "error-knowledge-graph-edge-predicate-unknown"]], "error.knowledge_graph.edge.predicate.invalid": [[8, "error-knowledge-graph-edge-predicate-invalid"]], "error.knowledge_graph.edge.predicate.not_array": [[8, "error-knowledge-graph-edge-predicate-not-array"]], "error.knowledge_graph.edge.predicate.empty_array": [[8, "error-knowledge-graph-edge-predicate-empty-array"]], "error.knowledge_graph.edge.predicate.abstract": [[8, "error-knowledge-graph-edge-predicate-abstract"]], "error.knowledge_graph.edge.predicate.mixin": [[8, "error-knowledge-graph-edge-predicate-mixin"]], "error.knowledge_graph.edge.attribute.missing": [[8, "error-knowledge-graph-edge-attribute-missing"]], "error.knowledge_graph.edge.attribute.empty": [[8, "error-knowledge-graph-edge-attribute-empty"]], "error.knowledge_graph.edge.attribute.not_array": [[8, "error-knowledge-graph-edge-attribute-not-array"]], "error.knowledge_graph.edge.attribute.type_id.unknown": [[8, "error-knowledge-graph-edge-attribute-type-id-unknown"]], "error.knowledge_graph.edge.attribute.type_id.abstract": [[8, "error-knowledge-graph-edge-attribute-type-id-abstract"]], "error.knowledge_graph.edge.attribute.type_id.mixin": [[8, "error-knowledge-graph-edge-attribute-type-id-mixin"]], "error.knowledge_graph.edge.attribute.type_id.missing": [[8, "error-knowledge-graph-edge-attribute-type-id-missing"]], "error.knowledge_graph.edge.attribute.type_id.empty": [[8, "error-knowledge-graph-edge-attribute-type-id-empty"]], "error.knowledge_graph.edge.attribute.type_id.not_curie": [[8, "error-knowledge-graph-edge-attribute-type-id-not-curie"]], "error.knowledge_graph.edge.attribute.value.missing": [[8, "error-knowledge-graph-edge-attribute-value-missing"]], "error.knowledge_graph.edge.attribute.value.empty": [[8, "error-knowledge-graph-edge-attribute-value-empty"]], "error.knowledge_graph.edge.provenance.infores.missing": [[8, "error-knowledge-graph-edge-provenance-infores-missing"]], "error.knowledge_graph.edge.provenance.missing_primary": [[8, "error-knowledge-graph-edge-provenance-missing-primary"]], "error.knowledge_graph.edge.qualifiers.not_array": [[8, "error-knowledge-graph-edge-qualifiers-not-array"]], "error.knowledge_graph.edge.qualifiers.empty": [[8, "error-knowledge-graph-edge-qualifiers-empty"]], "error.knowledge_graph.edge.qualifiers.qualifier.type_id.unknown": [[8, "error-knowledge-graph-edge-qualifiers-qualifier-type-id-unknown"]], "error.knowledge_graph.edge.qualifiers.qualifier.value.not_a_predicate": [[8, "error-knowledge-graph-edge-qualifiers-qualifier-value-not-a-predicate"]], "error.knowledge_graph.edge.qualifiers.qualifier.invalid": [[8, "error-knowledge-graph-edge-qualifiers-qualifier-invalid"]], "error.knowledge_graph.edge.knowledge_level.missing": [[8, "error-knowledge-graph-edge-knowledge-level-missing"]], "error.knowledge_graph.edge.knowledge_level.duplicated": [[8, "error-knowledge-graph-edge-knowledge-level-duplicated"]], "error.knowledge_graph.edge.knowledge_level.invalid": [[8, "error-knowledge-graph-edge-knowledge-level-invalid"]], "error.knowledge_graph.edge.agent_type.missing": [[8, "error-knowledge-graph-edge-agent-type-missing"]], "error.knowledge_graph.edge.agent_type.duplicated": [[8, "error-knowledge-graph-edge-agent-type-duplicated"]], "error.knowledge_graph.edge.agent_type.invalid": [[8, "error-knowledge-graph-edge-agent-type-invalid"]], "error.knowledge_graph.edge.sources.missing": [[8, "error-knowledge-graph-edge-sources-missing"]], "error.knowledge_graph.edge.sources.empty": [[8, "error-knowledge-graph-edge-sources-empty"]], "error.knowledge_graph.edge.sources.not_array": [[8, "error-knowledge-graph-edge-sources-not-array"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_id.infores.missing": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-id-infores-missing"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_id.infores.not_curie": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-id-infores-not-curie"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_id.infores.invalid": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-id-infores-invalid"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_id.infores.unknown": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-id-infores-unknown"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_id.empty": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-id-empty"]], "error.knowledge_graph.edge.sources.retrieval_source.upstream_resource_ids.infores.missing": [[8, "error-knowledge-graph-edge-sources-retrieval-source-upstream-resource-ids-infores-missing"]], "error.knowledge_graph.edge.sources.retrieval_source.upstream_resource_ids.infores.not_curie": [[8, "error-knowledge-graph-edge-sources-retrieval-source-upstream-resource-ids-infores-not-curie"]], "error.knowledge_graph.edge.sources.retrieval_source.upstream_resource_ids.infores.invalid": [[8, "error-knowledge-graph-edge-sources-retrieval-source-upstream-resource-ids-infores-invalid"]], "error.knowledge_graph.edge.sources.retrieval_source.upstream_resource_ids.infores.unknown": [[8, "error-knowledge-graph-edge-sources-retrieval-source-upstream-resource-ids-infores-unknown"]], "error.knowledge_graph.edge.sources.retrieval_source.resource_role.empty": [[8, "error-knowledge-graph-edge-sources-retrieval-source-resource-role-empty"]], "Warning": [[8, "warning"]], "warning.biolink.element.range.unspecified": [[8, "warning-biolink-element-range-unspecified"]], "warning.trapi.response.status.unknown": [[8, "warning-trapi-response-status-unknown"]], "warning.trapi.response.schema_version.missing": [[8, "warning-trapi-response-schema-version-missing"]], "warning.trapi.response.biolink_version.missing": [[8, "warning-trapi-response-biolink-version-missing"]], "warning.trapi.response.message.knowledge_graph.empty": [[8, "warning-trapi-response-message-knowledge-graph-empty"]], "warning.trapi.response.message.knowledge_graph.node.category.imprecise": [[8, "warning-trapi-response-message-knowledge-graph-node-category-imprecise"]], "warning.trapi.response.message.knowledge_graph.node.identifier.unresolved": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-unresolved"]], "warning.trapi.response.message.knowledge_graph.node.identifier.no_equivalent_identifiers": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-no-equivalent-identifiers"]], "warning.trapi.response.message.knowledge_graph.node.identifier.no_preferred_identifier": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-no-preferred-identifier"]], "warning.trapi.response.message.knowledge_graph.node.identifier.no_aliases": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-no-aliases"]], "warning.trapi.response.message.knowledge_graph.node.identifier.namespace.non_canonical": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-namespace-non-canonical"]], "warning.trapi.response.message.knowledge_graph.node.identifier.namespace.missing": [[8, "warning-trapi-response-message-knowledge-graph-node-identifier-namespace-missing"]], "warning.trapi.response.message.results.empty": [[8, "warning-trapi-response-message-results-empty"]], "warning.trapi.response.workflow.runner_parameters.missing": [[8, "warning-trapi-response-workflow-runner-parameters-missing"]], "warning.trapi.response.workflow.parameters.missing": [[8, "warning-trapi-response-workflow-parameters-missing"]], "warning.graph.empty": [[8, "warning-graph-empty"]], "warning.input_edge.node.category.deprecated": [[8, "warning-input-edge-node-category-deprecated"]], "warning.input_edge.node.category.not_concrete": [[8, "warning-input-edge-node-category-not-concrete"]], "warning.input_edge.node.id.unmapped_to_category": [[8, "warning-input-edge-node-id-unmapped-to-category"]], "warning.input_edge.predicate.deprecated": [[8, "warning-input-edge-predicate-deprecated"]], "warning.input_edge.predicate.non_canonical": [[8, "warning-input-edge-predicate-non-canonical"]], "warning.query_graph.nodes.dangling": [[8, "warning-query-graph-nodes-dangling"]], "warning.query_graph.node.category.deprecated": [[8, "warning-query-graph-node-category-deprecated"]], "warning.query_graph.node.ids.unmapped_prefix": [[8, "warning-query-graph-node-ids-unmapped-prefix"]], "warning.query_graph.edge.predicate.deprecated": [[8, "warning-query-graph-edge-predicate-deprecated"]], "warning.query_graph.edge.predicate.non_canonical": [[8, "warning-query-graph-edge-predicate-non-canonical"]], "warning.query_graph.edge.qualifier_constraints.qualifier_set.qualifiers.qualifier.value.unresolved": [[8, "warning-query-graph-edge-qualifier-constraints-qualifier-set-qualifiers-qualifier-value-unresolved"]], "warning.knowledge_graph.nodes.dangling": [[8, "warning-knowledge-graph-nodes-dangling"]], "warning.knowledge_graph.node.name.missing": [[8, "warning-knowledge-graph-node-name-missing"]], "warning.knowledge_graph.node.category.deprecated": [[8, "warning-knowledge-graph-node-category-deprecated"]], "warning.knowledge_graph.node.category.abstract_or_mixin": [[8, "warning-knowledge-graph-node-category-abstract-or-mixin"]], "warning.knowledge_graph.node.id.unmapped_prefix": [[8, "warning-knowledge-graph-node-id-unmapped-prefix"]], "warning.knowledge_graph.edge.predicate.deprecated": [[8, "warning-knowledge-graph-edge-predicate-deprecated"]], "warning.knowledge_graph.edge.predicate.non_canonical": [[8, "warning-knowledge-graph-edge-predicate-non-canonical"]], "warning.knowledge_graph.edge.qualifiers.qualifier.value.unresolved": [[8, "warning-knowledge-graph-edge-qualifiers-qualifier-value-unresolved"]], "warning.knowledge_graph.edge.attribute.type_id.is_category": [[8, "warning-knowledge-graph-edge-attribute-type-id-is-category"]], "warning.knowledge_graph.edge.attribute.type_id.is_predicate": [[8, "warning-knowledge-graph-edge-attribute-type-id-is-predicate"]], "warning.knowledge_graph.edge.attribute.type_id.not_association_slot": [[8, "warning-knowledge-graph-edge-attribute-type-id-not-association-slot"]], "warning.knowledge_graph.edge.attribute.type_id.non_biolink_prefix": [[8, "warning-knowledge-graph-edge-attribute-type-id-non-biolink-prefix"]], "warning.knowledge_graph.edge.attribute.type_id.deprecated": [[8, "warning-knowledge-graph-edge-attribute-type-id-deprecated"]], "warning.knowledge_graph.edge.provenance.multiple_primary": [[8, "warning-knowledge-graph-edge-provenance-multiple-primary"]], "warning.knowledge_graph.edge.provenance.ara.missing": [[8, "warning-knowledge-graph-edge-provenance-ara-missing"]], "warning.knowledge_graph.edge.provenance.kp.missing": [[8, "warning-knowledge-graph-edge-provenance-kp-missing"]], "warning.knowledge_graph.edge.knowledge_level.missing": [[8, "warning-knowledge-graph-edge-knowledge-level-missing"]], "warning.knowledge_graph.edge.agent_type.missing": [[8, "warning-knowledge-graph-edge-agent-type-missing"]], "warning.knowledge_graph.edge.treats.support_graph.missing": [[8, "warning-knowledge-graph-edge-treats-support-graph-missing"]], "Information": [[8, "information"]], "info.trapi.response.message.knowledge_graph.node.parent.match": [[8, "info-trapi-response-message-knowledge-graph-node-parent-match"]], "info.excluded": [[8, "info-excluded"]], "info.compliant": [[8, "info-compliant"]], "info.input_edge.predicate.abstract": [[8, "info-input-edge-predicate-abstract"]], "info.input_edge.predicate.mixin": [[8, "info-input-edge-predicate-mixin"]], "info.query_graph.edge.predicate.abstract": [[8, "info-query-graph-edge-predicate-abstract"]], "info.query_graph.edge.predicate.mixin": [[8, "info-query-graph-edge-predicate-mixin"]], "info.knowledge_graph.edge.predicate.abstract": [[8, "info-knowledge-graph-edge-predicate-abstract"]], "info.knowledge_graph.edge.predicate.mixin": [[8, "info-knowledge-graph-edge-predicate-mixin"]], "info.knowledge_graph.edge.attribute.type_id.abstract": [[8, "info-knowledge-graph-edge-attribute-type-id-abstract"]], "info.knowledge_graph.edge.attribute.type_id.mixin": [[8, "info-knowledge-graph-edge-attribute-type-id-mixin"]], "Skipped Test": [[8, "skipped-test"]], "skipped.test": [[8, "id1"]]}, "indexentries": {"trapiresponsevalidator (class in reasoner_validator.validator)": [[1, "reasoner_validator.validator.TRAPIResponseValidator"]], "category_matched() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.category_matched"]], "check_compliance_of_trapi_response() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.check_compliance_of_trapi_response"]], "get_aliases() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.get_aliases"]], "has_valid_knowledge_graph() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.has_valid_knowledge_graph"]], "has_valid_query_graph() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.has_valid_query_graph"]], "has_valid_results() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.has_valid_results"]], "is_trapi_1_4_or_later() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.is_trapi_1_4_or_later"]], "module": [[1, "module-reasoner_validator.validator"], [2, "module-reasoner_validator.biolink"], [3, "module-reasoner_validator.report"], [4, "module-reasoner_validator.trapi"], [5, "module-reasoner_validator.trapi.mapping"], [6, "module-reasoner_validator.validation_codes"], [7, "module-reasoner_validator.versioning"]], "reasoner_validator.validator": [[1, "module-reasoner_validator.validator"]], "resolve_testcase_node() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.resolve_testcase_node"]], "sample_graph() (reasoner_validator.validator.trapiresponsevalidator static method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.sample_graph"]], "sample_results() (reasoner_validator.validator.trapiresponsevalidator static method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.sample_results"]], "sanitize_workflow() (reasoner_validator.validator.trapiresponsevalidator static method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.sanitize_workflow"]], "testcase_edge_bindings() (reasoner_validator.validator.trapiresponsevalidator static method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_edge_bindings"]], "testcase_input_found_in_response() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_input_found_in_response"]], "testcase_node_bindings() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_node_bindings"]], "testcase_node_category_found() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_node_category_found"]], "testcase_node_found() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_node_found"]], "testcase_result_found() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.testcase_result_found"]], "validate_binding() (reasoner_validator.validator.trapiresponsevalidator method)": [[1, "reasoner_validator.validator.TRAPIResponseValidator.validate_binding"]], "bmtwrapper (class in reasoner_validator.biolink)": [[2, "reasoner_validator.biolink.BMTWrapper"]], "biolinkvalidator (class in reasoner_validator.biolink)": [[2, "reasoner_validator.biolink.BiolinkValidator"]], "category_inclusions (reasoner_validator.biolink.biolinkvalidator attribute)": [[2, "reasoner_validator.biolink.BiolinkValidator.CATEGORY_INCLUSIONS"]], "predicate_inclusions (reasoner_validator.biolink.biolinkvalidator attribute)": [[2, "reasoner_validator.biolink.BiolinkValidator.PREDICATE_INCLUSIONS"]], "build_source_trail() (reasoner_validator.biolink.biolinkvalidator static method)": [[2, "reasoner_validator.biolink.BiolinkValidator.build_source_trail"]], "check_biolink_model_compliance() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.check_biolink_model_compliance"]], "check_biolink_model_compliance_of_input_edge() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.check_biolink_model_compliance_of_input_edge"]], "count_node() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.count_node"]], "get_attribute_type_exclusions() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_attribute_type_exclusions"]], "get_biolink_model_toolkit() (in module reasoner_validator.biolink)": [[2, "reasoner_validator.biolink.get_biolink_model_toolkit"]], "get_biolink_version() (reasoner_validator.biolink.bmtwrapper method)": [[2, "reasoner_validator.biolink.BMTWrapper.get_biolink_version"]], "get_biolink_version() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_biolink_version"]], "get_bmt() (reasoner_validator.biolink.bmtwrapper method)": [[2, "reasoner_validator.biolink.BMTWrapper.get_bmt"]], "get_inverse_predicate() (reasoner_validator.biolink.bmtwrapper method)": [[2, "reasoner_validator.biolink.BMTWrapper.get_inverse_predicate"]], "get_node_categories() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_node_categories"]], "get_node_identifiers() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_node_identifiers"]], "get_reference() (in module reasoner_validator.biolink)": [[2, "reasoner_validator.biolink.get_reference"]], "get_result() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_result"]], "get_target_provenance() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.get_target_provenance"]], "has_dangling_nodes() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.has_dangling_nodes"]], "has_valid_node_information() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.has_valid_node_information"]], "is_curie() (in module reasoner_validator.biolink)": [[2, "reasoner_validator.biolink.is_curie"]], "is_symmetric() (reasoner_validator.biolink.bmtwrapper method)": [[2, "reasoner_validator.biolink.BMTWrapper.is_symmetric"]], "is_treats() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.is_treats"]], "merge() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.merge"]], "minimum_required_biolink_version() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.minimum_required_biolink_version"]], "reasoner_validator.biolink": [[2, "module-reasoner_validator.biolink"]], "report_header() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.report_header"]], "reset_biolink_version() (reasoner_validator.biolink.bmtwrapper method)": [[2, "reasoner_validator.biolink.BMTWrapper.reset_biolink_version"]], "reset_biolink_version() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.reset_biolink_version"]], "reset_node_info() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.reset_node_info"]], "set_nodes() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.set_nodes"]], "to_dict() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.to_dict"]], "validate_agent_type() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_agent_type"]], "validate_attribute_constraints() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_attribute_constraints"]], "validate_attributes() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_attributes"]], "validate_biolink() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_biolink"]], "validate_category() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_category"]], "validate_element_status() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_element_status"]], "validate_graph_edge() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_graph_edge"]], "validate_graph_node() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_graph_node"]], "validate_infores() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_infores"]], "validate_input_edge_node() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_input_edge_node"]], "validate_knowledge_level() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_knowledge_level"]], "validate_predicate() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_predicate"]], "validate_provenance() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_provenance"]], "validate_qualifier_constraints() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_qualifier_constraints"]], "validate_qualifier_entry() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_qualifier_entry"]], "validate_qualifiers() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_qualifiers"]], "validate_slot_value() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_slot_value"]], "validate_sources() (reasoner_validator.biolink.biolinkvalidator method)": [[2, "reasoner_validator.biolink.BiolinkValidator.validate_sources"]], "default_trapi_version (reasoner_validator.report.validationreporter attribute)": [[3, "reasoner_validator.report.ValidationReporter.DEFAULT_TRAPI_VERSION"]], "input_edge (reasoner_validator.report.trapigraphtype attribute)": [[3, "reasoner_validator.report.TRAPIGraphType.Input_Edge"]], "knowledge_graph (reasoner_validator.report.trapigraphtype attribute)": [[3, "reasoner_validator.report.TRAPIGraphType.Knowledge_Graph"]], "query_graph (reasoner_validator.report.trapigraphtype attribute)": [[3, "reasoner_validator.report.TRAPIGraphType.Query_Graph"]], "reportjsonencoder (class in reasoner_validator.report)": [[3, "reasoner_validator.report.ReportJsonEncoder"]], "trapigraphtype (class in reasoner_validator.report)": [[3, "reasoner_validator.report.TRAPIGraphType"]], "validationreporter (class in reasoner_validator.report)": [[3, "reasoner_validator.report.ValidationReporter"]], "add_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.add_messages"]], "apply_validation() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.apply_validation"]], "default() (reasoner_validator.report.reportjsonencoder method)": [[3, "reasoner_validator.report.ReportJsonEncoder.default"]], "dump() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump"]], "dump_all_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_all_messages"]], "dump_critical() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_critical"]], "dump_errors() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_errors"]], "dump_info() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_info"]], "dump_messages_type() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_messages_type"]], "dump_skipped() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_skipped"]], "dump_warnings() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dump_warnings"]], "dumps() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.dumps"]], "get_all_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_all_messages"]], "get_all_messages_of_type() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_all_messages_of_type"]], "get_critical() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_critical"]], "get_default_target() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_default_target"]], "get_default_test() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_default_test"]], "get_errors() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_errors"]], "get_info() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_info"]], "get_message_type() (reasoner_validator.report.validationreporter static method)": [[3, "reasoner_validator.report.ValidationReporter.get_message_type"]], "get_messages_by_target() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_messages_by_target"]], "get_messages_by_test() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_messages_by_test"]], "get_messages_of_type() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_messages_of_type"]], "get_skipped() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_skipped"]], "get_warnings() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.get_warnings"]], "has_critical() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_critical"]], "has_errors() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_errors"]], "has_information() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_information"]], "has_message_type() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_message_type"]], "has_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_messages"]], "has_skipped() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_skipped"]], "has_warnings() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.has_warnings"]], "is_strict_validation() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.is_strict_validation"]], "label() (reasoner_validator.report.trapigraphtype method)": [[3, "reasoner_validator.report.TRAPIGraphType.label"]], "merge() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.merge"]], "merge_coded_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.merge_coded_messages"]], "merge_identified_messages() (reasoner_validator.report.validationreporter static method)": [[3, "reasoner_validator.report.ValidationReporter.merge_identified_messages"]], "merge_scoped_messages() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.merge_scoped_messages"]], "reasoner_validator.report": [[3, "module-reasoner_validator.report"]], "report() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.report"]], "report_header() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.report_header"]], "reset_default_target() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.reset_default_target"]], "reset_default_test() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.reset_default_test"]], "test_case_has_validation_errors() (reasoner_validator.report.validationreporter static method)": [[3, "reasoner_validator.report.ValidationReporter.test_case_has_validation_errors"]], "to_dict() (reasoner_validator.report.validationreporter method)": [[3, "reasoner_validator.report.ValidationReporter.to_dict"]], "trapiaccesserror": [[4, "reasoner_validator.trapi.TRAPIAccessError"]], "trapischemavalidator (class in reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator"]], "call_trapi() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.call_trapi"]], "default_target (reasoner_validator.trapi.trapischemavalidator attribute)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.default_target"]], "default_test (reasoner_validator.trapi.trapischemavalidator attribute)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.default_test"]], "fix_nullable() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.fix_nullable"]], "get_trapi_version() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.get_trapi_version"]], "is_valid_trapi_query() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.is_valid_trapi_query"]], "load_schema() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.load_schema"]], "map_semver() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.map_semver"]], "merge() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.merge"]], "messages (reasoner_validator.trapi.trapischemavalidator attribute)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.messages"]], "minimum_required_trapi_version() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.minimum_required_trapi_version"]], "openapi_to_jsonschema() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.openapi_to_jsonschema"]], "patch_schema() (in module reasoner_validator.trapi)": [[4, "reasoner_validator.trapi.patch_schema"]], "reasoner_validator.trapi": [[4, "module-reasoner_validator.trapi"]], "report_header() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.report_header"]], "reset_trapi_version() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.reset_trapi_version"]], "strict_validation (reasoner_validator.trapi.trapischemavalidator attribute)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.strict_validation"]], "to_dict() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.to_dict"]], "validate() (reasoner_validator.trapi.trapischemavalidator method)": [[4, "reasoner_validator.trapi.TRAPISchemaValidator.validate"]], "mappingvalidator (class in reasoner_validator.trapi.mapping)": [[5, "reasoner_validator.trapi.mapping.MappingValidator"]], "check_dangling_references() (reasoner_validator.trapi.mapping.mappingvalidator method)": [[5, "reasoner_validator.trapi.mapping.MappingValidator.check_dangling_references"]], "check_node_edge_mappings() (in module reasoner_validator.trapi.mapping)": [[5, "reasoner_validator.trapi.mapping.check_node_edge_mappings"]], "default_target (reasoner_validator.trapi.mapping.mappingvalidator attribute)": [[5, "reasoner_validator.trapi.mapping.MappingValidator.default_target"]], "default_test (reasoner_validator.trapi.mapping.mappingvalidator attribute)": [[5, "reasoner_validator.trapi.mapping.MappingValidator.default_test"]], "messages (reasoner_validator.trapi.mapping.mappingvalidator attribute)": [[5, "reasoner_validator.trapi.mapping.MappingValidator.messages"]], "reasoner_validator.trapi.mapping": [[5, "module-reasoner_validator.trapi.mapping"]], "strict_validation (reasoner_validator.trapi.mapping.mappingvalidator attribute)": [[5, "reasoner_validator.trapi.mapping.MappingValidator.strict_validation"]], "code_dictionary_file (reasoner_validator.validation_codes.codedictionary attribute)": [[6, "reasoner_validator.validation_codes.CodeDictionary.CODE_DICTIONARY_FILE"]], "context (reasoner_validator.validation_codes.codedictionary attribute)": [[6, "reasoner_validator.validation_codes.CodeDictionary.CONTEXT"]], "codedictionary (class in reasoner_validator.validation_codes)": [[6, "reasoner_validator.validation_codes.CodeDictionary"]], "description (reasoner_validator.validation_codes.codedictionary attribute)": [[6, "reasoner_validator.validation_codes.CodeDictionary.DESCRIPTION"]], "message (reasoner_validator.validation_codes.codedictionary attribute)": [[6, "reasoner_validator.validation_codes.CodeDictionary.MESSAGE"]], "code_dictionary (reasoner_validator.validation_codes.codedictionary attribute)": [[6, "reasoner_validator.validation_codes.CodeDictionary.code_dictionary"]], "display() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.display"]], "filter_copy_by_facet() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.filter_copy_by_facet"]], "get_code_entry() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_code_entry"]], "get_code_subtree() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_code_subtree"]], "get_description() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_description"]], "get_message_context() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_message_context"]], "get_message_template() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_message_template"]], "get_message_type() (reasoner_validator.validation_codes.codedictionary static method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.get_message_type"]], "markdown() (reasoner_validator.validation_codes.codedictionary class method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.markdown"]], "reasoner_validator.validation_codes": [[6, "module-reasoner_validator.validation_codes"]], "validation_code_tag() (reasoner_validator.validation_codes.codedictionary static method)": [[6, "reasoner_validator.validation_codes.CodeDictionary.validation_code_tag"]], "semver (class in reasoner_validator.versioning)": [[7, "reasoner_validator.versioning.SemVer"]], "semvererror": [[7, "reasoner_validator.versioning.SemVerError"]], "semverunderspecified": [[7, "reasoner_validator.versioning.SemVerUnderspecified"]], "buildmetadata (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.buildmetadata"]], "from_string() (reasoner_validator.versioning.semver class method)": [[7, "reasoner_validator.versioning.SemVer.from_string"]], "get_latest_version() (in module reasoner_validator.versioning)": [[7, "reasoner_validator.versioning.get_latest_version"]], "major (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.major"]], "minor (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.minor"]], "patch (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.patch"]], "prefix (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.prefix"]], "prerelease (reasoner_validator.versioning.semver attribute)": [[7, "reasoner_validator.versioning.SemVer.prerelease"]], "reasoner_validator.versioning": [[7, "module-reasoner_validator.versioning"]]}})